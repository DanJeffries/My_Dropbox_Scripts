pcamsat<-indpca(microsat,ind.labels=pops)
plot(pcamsat,col=popcols,eigen=T)
pcaSNP<-indpca(SNP,ind.labels=pops)
plot(pcaSNP, col=popcols,eigen=T)
pcaSNP
plot(pcaSNP, col = popcols)
plot(pcaSNP, col = popcols)
dev.off()
plot(pcaSNP, col = popcols)
plot(pcaSNP, col = popcols, main = "Principle component analyses (PC1 & PC2)")
install.packages("ggmap")
library(ggmap)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
detach("package:ade4", unload=TRUE)
detach("package:adegenet", unload=TRUE)
library(ggmap)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
###################### UPDATED FUNCTION THAT ACCEPTS POLYTOMIES #######################
rerootingMethod<-function(tree,x,model=c("ER","SYM"),...){
if(!is.binary.tree(tree)){
mt<-tree
tree<-multi2di(tree)
multif<-TRUE
} else multif<-FALSE
if(hasArg(tips)) tips<-list(...)$tips
else tips<-NULL
if(!is.matrix(model)) model<-model[1]
n<-length(tree$tip.label)
# if vector convert to binary matrix
if(!is.matrix(x)){
yy<-to.matrix(x,sort(unique(x)))
if(is.null(tips)) tips<-FALSE
} else {
if(is.null(tips)) tips<-TRUE
yy<-x
}
yy<-yy[tree$tip.label,]
yy<-yy/rowSums(yy)
YY<-apeAce(tree,yy,model=model)
Q<-matrix(c(0,YY$rates)[YY$index.matrix+1],length(YY$states),length(YY$states),
dimnames=list(YY$states,YY$states))
diag(Q)<--colSums(Q,na.rm=TRUE)
nn<-if(tips) c(1:n,2:tree$Nnode+n) else 2:tree$Nnode+n
ff<-function(nn){
tt<-reroot(tree,node.number=nn,position=tree$edge.length[which(tree$edge[,2]==nn)])
apeAce(tt,yy,model=model,fixedQ=Q)$lik.anc[1,]
}
XX<-t(sapply(nn,ff))
if(tips) XX<-rbind(XX[1:n,],YY$lik.anc[1,],XX[(n+1):nrow(XX),])
else XX<-rbind(yy,YY$lik.anc[1,],XX)
rownames(XX)<-1:(tree$Nnode+n)
if(tips) rownames(XX)[1:n]<-tree$tip.label
XX<-if(tips) XX else XX[1:tree$Nnode+n,]
if(multif){
M<-matchNodes(mt,tree)
ii<-sapply(M[,2],function(x,y) which(y==x),y=as.numeric(rownames(XX)))
XX<-XX[ii,]
rownames(XX)<-M[,1]
}
return(list(loglik=YY$loglik,Q=Q,marginal.anc=XX))
}
#######################################################################################
# Function to allow apeAce backwards compatibility #
apeAce<-function(tree,x,model,fixedQ=NULL,...){
if(hasArg(output.liks)){
output.liks<-list(...)$output.liks
return(fitMk(tree,x,model,fixedQ,...))
} else {
output.liks<-TRUE
return(fitMk(tree,x,model,fixedQ,output.liks=TRUE,...))
}
}
tre<-read.tree("BDNF_3_tree_ann_v1_NEWICK")
## read in the state probability matrix
Five_states_matrix<-as.matrix(read.table("Anc_states_prob_matrix.csv", h=T, row.names = 1))
setwd("~/Dropbox/My_Dropbox_Scripts/R/Anc_states_Rana/")
library(ape)
library(phytools)
###################### UPDATED FUNCTION THAT ACCEPTS POLYTOMIES #######################
rerootingMethod<-function(tree,x,model=c("ER","SYM"),...){
if(!is.binary.tree(tree)){
mt<-tree
tree<-multi2di(tree)
multif<-TRUE
} else multif<-FALSE
if(hasArg(tips)) tips<-list(...)$tips
else tips<-NULL
if(!is.matrix(model)) model<-model[1]
n<-length(tree$tip.label)
# if vector convert to binary matrix
if(!is.matrix(x)){
yy<-to.matrix(x,sort(unique(x)))
if(is.null(tips)) tips<-FALSE
} else {
if(is.null(tips)) tips<-TRUE
yy<-x
}
yy<-yy[tree$tip.label,]
yy<-yy/rowSums(yy)
YY<-apeAce(tree,yy,model=model)
Q<-matrix(c(0,YY$rates)[YY$index.matrix+1],length(YY$states),length(YY$states),
dimnames=list(YY$states,YY$states))
diag(Q)<--colSums(Q,na.rm=TRUE)
nn<-if(tips) c(1:n,2:tree$Nnode+n) else 2:tree$Nnode+n
ff<-function(nn){
tt<-reroot(tree,node.number=nn,position=tree$edge.length[which(tree$edge[,2]==nn)])
apeAce(tt,yy,model=model,fixedQ=Q)$lik.anc[1,]
}
XX<-t(sapply(nn,ff))
if(tips) XX<-rbind(XX[1:n,],YY$lik.anc[1,],XX[(n+1):nrow(XX),])
else XX<-rbind(yy,YY$lik.anc[1,],XX)
rownames(XX)<-1:(tree$Nnode+n)
if(tips) rownames(XX)[1:n]<-tree$tip.label
XX<-if(tips) XX else XX[1:tree$Nnode+n,]
if(multif){
M<-matchNodes(mt,tree)
ii<-sapply(M[,2],function(x,y) which(y==x),y=as.numeric(rownames(XX)))
XX<-XX[ii,]
rownames(XX)<-M[,1]
}
return(list(loglik=YY$loglik,Q=Q,marginal.anc=XX))
}
#######################################################################################
#######################################################################################
# Function to allow apeAce backwards compatibility #
apeAce<-function(tree,x,model,fixedQ=NULL,...){
if(hasArg(output.liks)){
output.liks<-list(...)$output.liks
return(fitMk(tree,x,model,fixedQ,...))
} else {
output.liks<-TRUE
return(fitMk(tree,x,model,fixedQ,output.liks=TRUE,...))
}
}
####################################################################################
tre<-read.tree("BDNF_3_tree_ann_v1_NEWICK")
## read in the state probability matrix
Five_states_matrix<-as.matrix(read.table("Anc_states_prob_matrix.csv", h=T, row.names = 1))
anc_sp_ER <- rerootingMethod(tre, Five_states_matrix, type = "discrete", model = "ER", method = "ML", tips = TRUE) ## model options are "ER", "SYM" or "ARD" - see ?ace for details
anc_sp_ER$loglik
setwd("~/Dropbox/My_Dropbox_Scripts/R/Anc_states_Rana/")
library(ape)
library(phytools)
tre<-read.tree("BDNF_3_tree_ann_v1_NEWICK")
## read in the state probability matrix
Five_states_matrix<-as.matrix(read.table("Anc_states_prob_matrix.csv", h=T, row.names = 1))
anc_sp_ER <- rerootingMethod(tre, Five_states_matrix, type = "discrete", model = "ER", method = "ML", tips = TRUE) ## model options are "ER", "SYM" or "ARD" - see ?ace for details
anc_sp_ER$loglik
anc_sp_SYM <- rerootingMethod(tre, Five_states_matrix, type = "discrete", model = "SYM", tips = TRUE) ## model options are "ER", "SYM" or "ARD" - see ?ace for details
anc_sp_ARD <- rerootingMethod(tre, Five_states_matrix, type = "discrete", model = "ARD", tips = TRUE) ## model options are "ER", "SYM" or "ARD" - see ?ace for details
anc_sp_ER$loglik
anc_sp_SYM$loglik
anc_sp_ARD$loglik
anc_sp_ER$Q
AIC_ER = 1-2ln(anc_sp_ER$loglik)
AIC_ER = 1-(2*(ln(anc_sp_ER$loglik)))
AIC_ER = 1-(2*(log(anc_sp_ER$loglik)))
AIC_ER
anc_sp_ER$loglik
AIC_ER = 1-(2*(log(anc_sp_ER$loglik)))
log(anc_sp_ER$loglik)
log(anc_sp_ER$loglik)
log10(anc_sp_ER$loglik)
AIC_ER = 1-(2*(log(-1*anc_sp_ER$loglik)))
AIC_ER
AIC_SYM = 15-(2*(log(-1*anc_sp_SYM$loglik)))
AIC_ARD = 30-(2*(log(-1*anc_sp_ARD$loglik)))
AIC_SYM
AIC_ARD
AIC_ER = 2*1-(2*(log(-1*anc_sp_ER$loglik)))
AIC_SYM = 2*15-(2*(log(-1*anc_sp_SYM$loglik)))
AIC_ARD = 2*30-(2*(log(-1*anc_sp_ARD$loglik)))
AIC_ER
AIC_SYM
AIC_ARD
AIC_ER = 2*1-(2*anc_sp_ER$loglik)))
AIC_ER = 2*1-(2*anc_sp_ER$loglik)
AIC_ER
AIC_SYM = 2*15-(2*anc_sp_SYM$loglik)
AIC_ARD = 2*30-(2*anc_sp_ARD$loglik)
AIC_SYM
AIC_ARD
## read in the state probability matrix
Five_states_matrix<-as.matrix(read.table("Tips_prob_matrix_5_states.txt", h=T, row.names = 1))
anc_sp_ARD <- rerootingMethod(tre, Five_states_matrix, type = "discrete", model = "ARD", tips = TRUE) ## model options are "ER", "SYM" or "ARD" - see ?ace for details
transition_matrix <- anc_sp_ARD$Q
transition_matrix
make.simmap(tre, Five_states_matrix, model = transition_matrix, nsim =10)
make.simmap(tre, Five_states_matrix, model = "ARD", nsim =10)
SM_10 <- make.simmap(tre, Five_states_matrix, model = "ARD", nsim =10)
sum_SM_10 <- summary(SM_10, plot = F)
sum_SM_10
plot(sum_SM_10)
SM_10 <- make.simmap(tre, Five_states_matrix, model = "ARD", nsim =100)
sum_SM_100 <- summary(SM_10, plot = F)
plot(sum_SM_10)
rgb(0,0,0,255)
rgb(0,0,0,1)
Chr01 <- rgb(0,0,0,1)
Chr02 <- rgb(86,180,233,1)
Chr03 <- rgb(213,94,0,1)
Chr05 <- rgb(204,121,167,1)
Chr08 <- rgb(240,228,66,1)
Chr01 <- "000000ff"
Chr02 <- "56b4e9ff"
Chr03 <- "d55e00ff"
Chr05 <- "cc79a7ff"
Chr08 <- "f0e442ff"
plot(sum_SM_10, piecol = c(Chr01, Chr02, Chr03, Chr05, Chr08))
plot(sum_SM_10, col = c(Chr01, Chr02, Chr03, Chr05, Chr08))
plot(sum_SM_10, c(Chr01, Chr02, Chr03, Chr05, Chr08))
nodelabels(pie=sum_SM_10$ace,piecol=c(Chr01, Chr02, Chr03, Chr05, Chr08),cex=0.5)
colours = c(Chr01, Chr02, Chr03, Chr05, Chr08)
nodelabels(pie=sum_SM_10$ace,piecol=colours,cex=0.5)
Chr01 <- "black"
colours = c(Chr01, Chr02, Chr03, Chr05, Chr08)
nodelabels(pie=sum_SM_10$ace,piecol=colours,cex=0.5)
sum_SM_100
SM_10 <- make.simmap(tre, Five_states_matrix, model = "ARD", nsim =100, tips = T)
sum_SM_100 <- summary(SM_10, plot = F)
plot(sum_SM_10, colours)
# read in the 10 state probability matrix
Ten_states_matrix<-as.matrix(read.table("Tips_prob_matrix_10_states.csv", h=T, row.names = 1))
# read in the 10 state probability matrix
Ten_states_matrix<-as.matrix(read.table("Tips_prob_matrix_10_states.csv", h=T, row.names = 1))
rowSums(Five_states_matrix)  ## check sum of rows (mine add up to 1.002 in some cases but still works)
row.names()
SM_100_10states <- make.simmap(tre, Ten_states_matrix, model = "ARD", nsim =100, tips = T)
sum_SM_100 <- summary(SM_10, plot = F)
plot(sum_SM_10, colours)
sum_SM_100_10states <- summary(SM_100_10states, plot = F)
plot(sum_SM_100_10states, colours)
sum_SM_100_10states
SM_100_10states
for tree in SM_100_10states{
print(tree)
}
for tree in SM_100_10states{
print(tree) }
for tree in SM_100_10states {
print(tree) }
for (tree in SM_100_10states) {
print(tree) }
SM_100_10states[[1]]
SM_100_10states[[1]]$edge
SM_100_10states[[1]]$edge.length
SM_100_10states[[2]]$edge.length
SM_100_10states[[2]]$mapped.edge
SM_100_10states[[2]]$edge
SM_100_10states[[2]]$maps
print(edge)
for (edge in SM_100_10states[[2]]$maps){
print(edge)
}
for (state in SM_100_10states[[2]]$maps[[1]]){
print(state)
}
for (state in SM_100_10states[[2]]$maps[[2]]){
print(state)
}
SM_100_10states[[2]]$maps
names(SM_100_10states[[2]]$maps)
print(names(state))
for (state in SM_100_10states[[2]]$maps[[2]]){
print(names(state))
}
SM_100_10states[[2]]$maps
SM_100_10states[[2]]$maps[[52]]
print(state)
for (state in SM_100_10states[[2]]$maps[[52]]){
print(state)
}
SM_100_10states[[2]]$maps[[52]]
SM_100_10states[[2]]$maps[[52]][1]
SM_100_10states[[2]]$maps[[52]][[1]
SM_100_10states[[2]]$maps[[52]][[1]]
SM_100_10states[[2]]$maps[[52]][[1]]
SM_100_10states[[2]]$maps[[52]][1]
names(SM_100_10states[[2]]$maps[[52]][1])
edge_counter = 0
for (state in SM_100_10states[[2]]$maps[[52]]){
print(names(SM_100_10states[[2]]$maps[[52]][edge_counter]), SM_100_10states[[2]]$maps[[52]][[edge_counter]]
}
edge_counter = 0
for (state in SM_100_10states[[2]]$maps[[52]]){
edge_counter =+ 1
print(names(SM_100_10states[[2]]$maps[[52]][edge_counter]), SM_100_10states[[2]]$maps[[52]][[edge_counter]])
}
edge_counter = 0
for (state in SM_100_10states[[2]]$maps[[52]]){
edge_counter =+ 1
print(names(SM_100_10states[[2]]$maps[[52]][edge_counter]))
print(SM_100_10states[[2]]$maps[[52]][[edge_counter]])
}
edge_counter = 0
for (state in SM_100_10states[[2]]$maps[[52]]){
print(sprintf("%s\t%s", names(SM_100_10states[[2]]$maps[[52]][edge_counter]),SM_100_10states[[2]]$maps[[52]][[edge_counter]])
}
edge_counter = 0
for (state in SM_100_10states[[2]]$maps[[52]]){
edge_counter =+ 1
print(sprintf("%s\t%s", names(SM_100_10states[[2]]$maps[[52]][edge_counter]),SM_100_10states[[2]]$maps[[52]][[edge_counter]]))
}
print(sprintf("%s %s", names(SM_100_10states[[2]]$maps[[52]][edge_counter]),SM_100_10states[[2]]$maps[[52]][[edge_counter]]))
edge_counter = 0
for (state in SM_100_10states[[2]]$maps[[52]]){
edge_counter =+ 1
print(cat(SM_100_10states[[2]]$maps[[52]][edge_counter]),SM_100_10states[[2]]$maps[[52]][[edge_counter]])
}
edge_counter = 0
for (state in SM_100_10states[[2]]$maps[[52]]){
edge_counter =+ 1
print(cat(SM_100_10states[[2]]$maps[[52]][edge_counter],SM_100_10states[[2]]$maps[[52]][[edge_counter]]))
}
print(paste0(SM_100_10states[[2]]$maps[[52]][edge_counter],SM_100_10states[[2]]$maps[[52]][[edge_counter]]))
edge_counter = 0
for (state in SM_100_10states[[2]]$maps[[52]]){
edge_counter =+ 1
print(paste0(SM_100_10states[[2]]$maps[[52]][edge_counter],SM_100_10states[[2]]$maps[[52]][[edge_counter]]))
}
print(paste0(SM_100_10states[[2]]$maps[[52]][edge_counter],"\t", SM_100_10states[[2]]$maps[[52]][[edge_counter]]))
for (state in SM_100_10states[[2]]$maps[[52]]){
edge_counter =+ 1
print(paste0(names(SM_100_10states[[2]]$maps[[52]][edge_counter]),"\t", SM_100_10states[[2]]$maps[[52]][[edge_counter]]))
}
names(SM_100_10states[[2]]$maps[[52]][1])
names(SM_100_10states[[2]]$maps[[52]][0])
for (state in SM_100_10states[[2]]$maps[[52]]){
print(paste0(names(SM_100_10states[[2]]$maps[[edge_counter]][state])," ", SM_100_10states[[2]]$maps[[edge_counter]][[state]]))
edge_counter =+ 1
}
state_counter = 1
state_counter = 1
for (state in SM_100_10states[[2]]$maps[[52]]){
print(paste0(names(SM_100_10states[[2]]$maps[[edge_counter]][state_counter])," ", SM_100_10states[[2]]$maps[[edge_counter]][[state_counter]]))
state_counter =+ 1
}
SM_100_10states[[2]]$maps[[52]]
state_counter = 1
for (state in SM_100_10states[[2]]$maps[[edge_counter]]){
print(paste0(names(SM_100_10states[[2]]$maps[[edge_counter]][state_counter])," ", SM_100_10states[[2]]$maps[[edge_counter]][[state_counter]]))
state_counter =+ 1
}
tree_counter = 1
for (tree in SM_100_10states) {
edge_counter = 1
for (edge in SM_100_10states[[tree_counter]]$maps) {
state_counter = 1
print(paste0("tree ", tree_counter))
print(paste0("edge ", edge_counter))
for (state in SM_100_10states[[tree_counter]]$maps[[edge_counter]]){
print(paste0(names(SM_100_10states[[tree_counter]]$maps[[edge_counter]][state_counter])," ", SM_100_10states[[tree_counter]]$maps[[edge_counter]][[state_counter]]))
state_counter =+ 1
}
edge_counter += 1
}
tree_counter += 1
}
tree_counter = 1
for (tree in SM_100_10states) {
edge_counter = 1
for (edge in SM_100_10states[[tree_counter]]$maps) {
state_counter = 1
print(paste0("tree ", tree_counter))
print(paste0("edge ", edge_counter))
for (state in SM_100_10states[[tree_counter]]$maps[[edge_counter]]){
print(paste0(names(SM_100_10states[[tree_counter]]$maps[[edge_counter]][state_counter])," ", SM_100_10states[[tree_counter]]$maps[[edge_counter]][[state_counter]]))
state_counter =+ 1
}
edge_counter =+ 1
}
tree_counter =+ 1
}
tree_counter = 1
for (tree in SM_100_10states) {
edge_counter = 1
for (edge in SM_100_10states[[tree_counter]]$maps) {
state_counter = 1
print(paste0("tree ", tree_counter))
print(paste0("edge ", edge_counter))
for (state in SM_100_10states[[tree_counter]]$maps[[edge_counter]]){
print(paste0(names(SM_100_10states[[tree_counter]]$maps[[edge_counter]][state_counter])," ", SM_100_10states[[tree_counter]]$maps[[edge_counter]][[state_counter]]))
state_counter =+ 1
}
edge_counter =+ 1
}
tree_counter =+ 1
}
state_counter = 1
for (state in SM_100_10states[[2]]$maps[[edge_counter]]){
print(paste0(names(SM_100_10states[[2]]$maps[[edge_counter]][state_counter])," ", SM_100_10states[[2]]$maps[[edge_counter]][[state_counter]]))
state_counter =+ 1
}
state_counter = 1
for (state in SM_100_10states[[1]]$maps[[edge_counter]]){
print(paste0(names(SM_100_10states[[1]]$maps[[edge_counter]][state_counter])," ", SM_100_10states[[1]]$maps[[edge_counter]][[state_counter]]))
state_counter =+ 1
}
SM_100_10states[[2]]$maps[[52]]
SM_100_10states[[1]]$maps[[1]]
SM_100_10states[[1]]$maps[[1]][2]
SM_100_10states[[2]]$maps[[1]][2]
SM_100_10states
SM_100_10states[[2]]
SM_100_10states[[2]]$maps[[1]]
SM_100_10states[[2]]$maps[[1]][1]
tree_counter = 0
for (tree in SM_100_10states) {
tree_counter =+ 1
edge_counter = 0
for (edge in SM_100_10states[[tree_counter]]$maps) {
edge_counter =+ 1
state_counter = 0
print(paste0("tree ", tree_counter))
print(paste0("edge ", edge_counter))
for (state in SM_100_10states[[tree_counter]]$maps[[edge_counter]]){
state_counter =+ 1
print(paste0(names(SM_100_10states[[tree_counter]]$maps[[edge_counter]][state_counter])," ", SM_100_10states[[tree_counter]]$maps[[edge_counter]][[state_counter]]))
}
}
}
tree_counter = 0
for (tree in SM_100_10states) {
tree_counter =+ 1
edge_counter = 0
for (edge in SM_100_10states[[tree_counter]]$maps) {
edge_counter =+ 1
state_counter = 0
print(paste0("tree ", tree_counter))
print(paste0("edge ", edge_counter))
for (state in SM_100_10states[[tree_counter]]$maps[[edge_counter]]){
state_counter =+ 1
print(paste0(names(SM_100_10states[[tree_counter]]$maps[[edge_counter]][state_counter])," ", SM_100_10states[[tree_counter]]$maps[[edge_counter]][[state_counter]]))
print(paste0(tree_counter, edge_counter, state_counter))
}
}
}
for (tree in SM_100_10states) {
tree_counter += 1
edge_counter = 0
for (edge in SM_100_10states[[tree_counter]]$maps) {
edge_counter += 1
state_counter = 0
print(paste0("tree ", tree_counter))
print(paste0("edge ", edge_counter))
for (state in SM_100_10states[[tree_counter]]$maps[[edge_counter]]){
state_counter += 1
print(paste0(names(SM_100_10states[[tree_counter]]$maps[[edge_counter]][state_counter])," ", SM_100_10states[[tree_counter]]$maps[[edge_counter]][[state_counter]]))
print(paste0(tree_counter, edge_counter, state_counter))
}
}
}
tree_counter = 0
for (tree in SM_100_10states) {
tree_counter <- tree_counter+1
edge_counter = 0
for (edge in SM_100_10states[[tree_counter]]$maps) {
edge_counter <- edge_counter + 1
state_counter = 0
print(paste0("tree ", tree_counter))
print(paste0("edge ", edge_counter))
for (state in SM_100_10states[[tree_counter]]$maps[[edge_counter]]){
state_counter <- state_counter + 1
print(paste0(names(SM_100_10states[[tree_counter]]$maps[[edge_counter]][state_counter])," ", SM_100_10states[[tree_counter]]$maps[[edge_counter]][[state_counter]]))
print(paste0(tree_counter, edge_counter, state_counter))
}
}
}
tree_counter = 0
for (tree in SM_100_10states) {
tree_counter <- tree_counter+1
edge_counter = 0
for (edge in SM_100_10states[[tree_counter]]$maps) {
edge_counter <- edge_counter + 1
state_counter = 0
print(paste0("tree ", tree_counter))
print(paste0("edge ", edge_counter))
for (state in SM_100_10states[[tree_counter]]$maps[[edge_counter]]){
state_counter <- state_counter + 1
print(paste0(names(SM_100_10states[[tree_counter]]$maps[[edge_counter]][state_counter])," ", SM_100_10states[[tree_counter]]$maps[[edge_counter]][[state_counter]]))
}
}
}
pbtree(n=28)
X<-fastBM(tree,nsim=3)
colnames(X)<-paste("trait",1:3)
phylomorphospace(tree,X[,c(1,2)],xlab="trait 1",ylab="trait 2")
phylomorphospace3d(tree,X)
plotSimmap(SM_100_10states,fsize=0.6,ftype="i",ylim=c(-1,Ntip(SM_100_10states)))
plotSimmap(SM_100_10states,fsize=0.6,ftype="i")
plot(sum_SM_5_states_1000sim) ## preliminary plot to check sanity
SM_5_states_1000sim <- make.simmap(tre, Five_states_matrix, model = "ARD", nsim =1000, tips = T)
sum_SM_5_states_1000sim <- summary(SM_5_states_1000sim, plot = F)
plot(sum_SM_5_states_1000sim) ## preliminary plot to check sanity
# read in the 10 state probability matrix
Ten_states_matrix<-as.matrix(read.table("Tips_prob_matrix_10_states.csv", h=T, row.names = 1))
SM_10states_1000sim <- make.simmap(tre, Ten_states_matrix, model = "ARD", nsim =1000, tips = T)
sum_SM_10states_1000sim <- summary(SM_10states_1000sim, plot = F)
plot(sum_SM_10states_1000sim)
Ten_states_matrix<-as.matrix(read.table("Tips_prob_matrix_10_states.csv", h=T, row.names = 1))
rowSums(Five_states_matrix)  ## check sum of rows (mine add up to 1.002 in some cases but still works)
SM_10states_1000sim <- make.simmap(tre, Ten_states_matrix, model = "ARD", nsim =1000, tips = T)
plot.phylo(tre)
tiplabels(pie=x,piecol=cols,cex=0.3)
tiplabels(pie=Five_states_matrix,piecol=cols,cex=0.3)
tiplabels(pie=Five_states_matrix,cex=0.3)
tiplabels(pie=Ten_states_matrix,cex=0.3)
